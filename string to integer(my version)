public class Solution {
    public int atoi(String str) {
        long result = 0;//long is very important. Otherwise the int is out of boundary before the final compare with MAX_VALUE
        int sign = 0;
        boolean mark = false;
        str = str.trim();//eliminate the leading white space 
        for(int i = 0;i<str.length(); i++){
            if((str.charAt(i)=='-' && sign == 1 && result == 0)||(str.charAt(i)=='+' && sign == -1 && result == 0)){
                return 0;
            }
            else if(str.charAt(i)=='-' && sign == 0){ //take the leading signal
                sign = -1;
            }
            else if(str.charAt(i)=='+' && sign == 0){
                sign = 1;
            }
            else if((str.charAt(i)<='9' && str.charAt(i)>='0' && result != 0)||(str.charAt(i)<='9' && str.charAt(i)>'0' && result == 0)){
                result = result*10 + str.charAt(i)-'0';//char to integer is important
            }
            else if((str.charAt(i)>'9' || str.charAt(i)<'0') ){//any character except for + - will crush 
                break;
            }
        }
        sign = sign==0?1:sign;
        if( sign*result>Integer.MAX_VALUE){
            return Integer.MAX_VALUE;
        }
        else if( sign*result<Integer.MIN_VALUE){
            return Integer.MIN_VALUE;
        }
        return (int)result * sign;
    }
}
