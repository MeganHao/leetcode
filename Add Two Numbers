/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

*/

public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode head = new ListNode(0);
        //用另外一个ListNode去记录头
        ListNode sumList = head;
        while (l1 != null && l2 != null) {
        // 关键在于生成新的list的时候每个node要新建
            head.next = new ListNode((l1.val + l2.val + carry) % 10);
            carry = (l1.val + l2.val + carry) / 10;
            l1 = l1.next;
            l2 = l2.next;
            head = head.next;
        }
        while (l1 != null) {
            head.next = new ListNode((l1.val + carry) % 10);
            carry = (l1.val + + carry) / 10;
            l1 = l1.next;
            head = head.next;
        }
        while (l2 != null) {
            head.next = new ListNode((l2.val + carry) % 10);
            carry = (l2.val + carry) / 10;
            l2 = l2.next;
            head = head.next;
        }
        if (carry == 1) {
            head.next = new ListNode(1);
        }
        return sumList.next;
    }
}
